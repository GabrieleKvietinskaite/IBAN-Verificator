{"version":3,"sources":["./src/app/app.component.html","./src/app/components/home/home.component.html","./src/$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/home/home.component.ts","./src/app/services/Iban.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["export default \"<body>\\r\\n  <div class=\\\"center\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <router-outlet></router-outlet>\\r\\n    </div>\\r\\n  </div>\\r\\n</body>\\r\\n\"","export default \"<h2>IBAN checker</h2>\\r\\n<hr class=\\\"mb-3\\\">\\r\\n<div *ngIf=\\\"!ibans\\\">\\r\\n  <input type=\\\"checkbox\\\" [(ngModel)]=\\\"type\\\" class=\\\"mb-3\\\"> Check multiple IBANs\\r\\n  <div *ngIf=\\\"!type\\\">\\r\\n    <h5>Insert IBAN you want to check</h5>\\r\\n    <form [formGroup]=\\\"ibanForm\\\" (ngSubmit)=\\\"checkIban()\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n          <input type=\\\"text\\\" formControlName=\\\"iban\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && fIban.iban.errors }\\\" placeholder=\\\"For example: LT647044001231465456\\\"/>\\r\\n          <div *ngIf=\\\"submitted && fIban.iban.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"fIban.iban.errors.required\\\">IBAN is required</div>\\r\\n              <div *ngIf=\\\"fIban.iban.errors.maxlength\\\">IBAN should not exceed 20 characters</div>\\r\\n          </div>\\r\\n      </div>\\r\\n      <div class=\\\"text-center\\\">\\r\\n        <button class=\\\"btn btn-outline-success\\\">CHECK IBAN</button>\\r\\n      </div>\\r\\n    </form>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"type\\\">\\r\\n    <h5>Insert list of IBANs separated by ':'</h5>\\r\\n    <form [formGroup]=\\\"ibansForm\\\" (ngSubmit)=\\\"checkIbans()\\\">\\r\\n      <div class=\\\"form-group\\\">\\r\\n          <textarea type=\\\"text\\\" formControlName=\\\"ibans\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && fIbans.ibans.errors }\\\" placeholder=\\\"For example: AA051245445454552117989:LT647044001231465456:LT517044077788877777\\\"></textarea>\\r\\n          <div *ngIf=\\\"submitted && fIbans.ibans.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"fIbans.ibans.errors.required\\\">IBANS is required</div>\\r\\n          </div>\\r\\n      </div>\\r\\n      <div class=\\\"text-center\\\">\\r\\n        <button class=\\\"btn btn-outline-success\\\">CHECK IBANS</button>\\r\\n      </div>\\r\\n    </form>\\r\\n  </div>\\r\\n</div>\\r\\n<div *ngIf=\\\"ibans\\\">\\r\\n  <div class=\\\"table-responsive\\\">\\r\\n    <table class=\\\"table table-hover\\\">\\r\\n      <thead class=\\\"bg-success text-white\\\">\\r\\n        <tr>\\r\\n          <th *ngFor=\\\"let head of headElements\\\" scope=\\\"col\\\">{{head}} </th>\\r\\n        </tr>\\r\\n      </thead>\\r\\n      <tbody>\\r\\n        <tr class=\\\"table-success\\\" *ngFor=\\\"let iban of ibans\\\">\\r\\n          <td scope=\\\"row\\\">{{iban.iban}}</td>\\r\\n          <td scope=\\\"row\\\">{{iban.isValid}}</td>\\r\\n          <td scope=\\\"row\\\">{{iban.bank}}</td>\\r\\n        </tr>\\r\\n      </tbody>\\r\\n    </table>\\r\\n  </div>\\r\\n  <div class=\\\"text-center\\\">\\r\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-success\\\" (click)=\\\"clear()\\\">CLEAR</button>\\r\\n  </div>  \\r\\n</div>\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule.withServerTransition({ appId: 'ng-cli-universal' }),\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    RouterModule.forRoot([\r\n      { path: '**', component: HomeComponent },\r\n    ])\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { IIban } from 'src/app/models/IIban.interface';\r\nimport { IbanService } from 'src/app/services/Iban.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n  ibanForm: FormGroup;\r\n  ibansForm: FormGroup;\r\n  submitted = false;\r\n  ibans: IIban[];\r\n  headElements = ['IBAN', 'IS VALID', 'BANK'];\r\n\r\n  constructor(private formBuilder: FormBuilder, \r\n    private ibanService: IbanService) { }\r\n\r\n  ngOnInit() {\r\n    this.ibanForm = this.formBuilder.group({\r\n      iban: ['', [ Validators.required, Validators.maxLength(20) ]]\r\n    });\r\n\r\n    this.ibansForm = this.formBuilder.group({\r\n      ibans: ['', [ Validators.required ]]\r\n    });\r\n  }\r\n\r\n  get fIban(){\r\n    return this.ibanForm.controls;\r\n  }\r\n\r\n  get fIbans(){\r\n    return this.ibansForm.controls;\r\n  }\r\n\r\n  checkIban(){\r\n    this.submitted = true;\r\n\r\n    if(this.ibanForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.ibanService.getIban(this.fIban.iban.value).subscribe(data =>{\r\n      this.ibans = [];\r\n      this.ibans.push(data);\r\n    });\r\n  }\r\n\r\n  checkIbans() {\r\n    this.submitted = true;\r\n\r\n    if(this.ibansForm.invalid) {\r\n      return;\r\n    }\r\n    \r\n    let ibans = this.fIbans.ibans.value.split(\":\").filter(function(iban){\r\n      return iban.length > 0;\r\n    });\r\n\r\n    this.ibanService.getIbans(ibans).subscribe((data: IIban[]) =>{\r\n      this.ibans = data;\r\n    });\r\n  }\r\n\r\n  clear(){\r\n    this.fIban.iban.setValue('');\r\n    this.fIbans.ibans.setValue('');\r\n    this.submitted = false;\r\n    this.ibans = null;\r\n  }\r\n}\r\n","import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { IIban } from '../models/IIban.interface';\r\nimport { map, catchError } from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IbanService {\r\n\r\n  private REST_API_SERVICE = `https://${window.location.host}/api`;\r\n  private httpOptions: any;\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n    this.httpOptions = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n    };\r\n  }\r\n\r\n  getIban(iban: string){\r\n    let url = `/iban`;\r\n    let body = JSON.stringify(iban)\r\n\r\n    return this.httpClient.post<IIban>(this.REST_API_SERVICE + url, body, <Object>this.httpOptions);\r\n  }\r\n\r\n  getIbans(ibans: string[]) {\r\n    let url = `/ibans`;\r\n    let body = JSON.stringify(ibans)\r\n\r\n    return this.httpClient.post<IIban[]>(this.REST_API_SERVICE + url, body, <Object>this.httpOptions);\r\n  }\r\n\r\n  private handleError(error: HttpResponse<Error>) {\r\n    return throwError(error);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nexport function getBaseUrl() {\r\n  return document.getElementsByTagName('base')[0].href;\r\n}\r\n\r\nconst providers = [\r\n  { provide: 'BASE_URL', useFactory: getBaseUrl, deps: [] }\r\n];\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":"webpack:///"}